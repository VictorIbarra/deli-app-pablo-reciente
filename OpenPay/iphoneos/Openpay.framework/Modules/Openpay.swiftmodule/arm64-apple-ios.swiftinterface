// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios12.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Openpay
import Foundation
@_exported import Openpay
import Swift
import UIKit
import WebKit
public class Openpay {
  public init(withMerchantId merchantId: Swift.String, andApiKey apiKey: Swift.String, isProductionMode: Swift.Bool)
  public init(withMerchantId merchantId: Swift.String, andApiKey apiKey: Swift.String, isProductionMode: Swift.Bool, isDebug: Swift.Bool)
  public func createTokenWithCard(address: Openpay.OPAddress!, successFunction: @escaping (Openpay.OPToken) -> Swift.Void, failureFunction: @escaping (Foundation.NSError) -> Swift.Void)
  public func getTokenWithId(tokenId: Swift.String, successFunction: @escaping (Openpay.OPToken) -> Swift.Void, failureFunction: @escaping (Foundation.NSError) -> Swift.Void)
  public func createDeviceSessionId(successFunction: @escaping (Swift.String) -> Swift.Void, failureFunction: @escaping (Foundation.NSError) -> Swift.Void)
  public func loadCardForm(in viewController: UIKit.UIViewController, successFunction: @escaping () -> Swift.Void, failureFunction: @escaping (Foundation.NSError) -> Swift.Void, formTitle: Swift.String)
  @objc deinit
}
public class OPToken {
  public var id: Swift.String
  public var card: Openpay.OPCard
  public init()
  public init(with dictionary: Swift.Dictionary<Swift.String, Any>)
  @objc deinit
}
public class OPCard {
  public enum OPCardType : Swift.Int {
    case OPCardTypeUnknown, OPCardTypeVisa, OPCardTypeMastercard, OPCardTypeAmericanExpress
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum OPCardSecurityCodeCheck : Swift.Int {
    case OPCardSecurityCodeCheckUnknown, OPCardSecurityCodeCheckPassed, OPCardSecurityCodeCheckFailed
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public var creationDate: Foundation.NSDate
  public var id: Swift.String
  public var bankName: Swift.String
  public var allowPayouts: Swift.Bool
  public var holderName: Swift.String
  public var expirationMonth: Swift.String
  public var expirationYear: Swift.String
  public var address: Openpay.OPAddress!
  public var number: Swift.String {
    get
    set
  }
  public var brand: Swift.String
  public var allowsCharges: Swift.Bool
  public var bankCode: Swift.String
  public var cvv2: Swift.String
  public var errors: Foundation.NSMutableArray
  public var expired: Swift.Bool {
    get
  }
  public var type: Openpay.OPCard.OPCardType {
    get
  }
  public var numberValid: Swift.Bool {
    get
  }
  public var valid: Swift.Bool {
    get
  }
  public var securityCodeCheck: Openpay.OPCard.OPCardSecurityCodeCheck {
    get
  }
  public init()
  public init(with dictionary: Swift.Dictionary<Swift.String, Any>)
  public func asDictionary() -> Swift.Dictionary<Swift.String, Any>
  @objc deinit
}
public class OPAddress {
  public var postalCode: Swift.String
  public var line1: Swift.String
  public var line2: Swift.String
  public var line3: Swift.String
  public var city: Swift.String
  public var state: Swift.String
  public var countryCode: Swift.String
  public init()
  public init(with dictionary: Swift.Dictionary<Swift.String, Any>)
  public func asDictionary() -> Swift.Dictionary<Swift.String, Any>
  @objc deinit
}
@objc public class CardView : UIKit.UIView, UIKit.UITextFieldDelegate {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Openpay.OPCard.OPCardType : Swift.Equatable {}
extension Openpay.OPCard.OPCardType : Swift.Hashable {}
extension Openpay.OPCard.OPCardType : Swift.RawRepresentable {}
extension Openpay.OPCard.OPCardSecurityCodeCheck : Swift.Equatable {}
extension Openpay.OPCard.OPCardSecurityCodeCheck : Swift.Hashable {}
extension Openpay.OPCard.OPCardSecurityCodeCheck : Swift.RawRepresentable {}
